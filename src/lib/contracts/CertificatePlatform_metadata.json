{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "issuer",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "string",
						"name": "holderId",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "metadataURI",
						"type": "string"
					}
				],
				"name": "CertificateIssued",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "issuer",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "string",
						"name": "holderId",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "metadataURI",
						"type": "string"
					}
				],
				"name": "CertificateRevoked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "issuer",
						"type": "address"
					}
				],
				"name": "IssuerAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "issuer",
						"type": "address"
					}
				],
				"name": "IssuerRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_issuer",
						"type": "address"
					}
				],
				"name": "addIssuer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "holderId",
						"type": "string"
					}
				],
				"name": "getCertificates",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "issuer",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "holderId",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "metadataURI",
								"type": "string"
							},
							{
								"internalType": "uint256",
								"name": "issuedAt",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "revoked",
								"type": "bool"
							}
						],
						"internalType": "struct CertificatePlatform.Certificate[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "isIssuer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "holderId",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "metadataURI",
						"type": "string"
					}
				],
				"name": "issueCertificate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "issuers",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_issuer",
						"type": "address"
					}
				],
				"name": "removeIssuer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "holderId",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "revokeCertificate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "holderId",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "verifyCertificate",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "issuer",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "holderId",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "metadataURI",
								"type": "string"
							},
							{
								"internalType": "uint256",
								"name": "issuedAt",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "revoked",
								"type": "bool"
							}
						],
						"internalType": "struct CertificatePlatform.Certificate",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "A contract for issuing and managing verifiable certificates with role-based access control. The contract owner can add/remove issuers. Authorized issuers can issue/revoke certificates.",
			"errors": {
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"addIssuer(address)": {
					"details": "Allows the owner to authorize a new issuer.",
					"params": {
						"_issuer": "The address of the new issuer."
					}
				},
				"constructor": {
					"details": "Sets the contract deployer as the initial owner."
				},
				"getCertificates(string)": {
					"details": "Retrieves all certificates for a given holder ID.",
					"params": {
						"holderId": "The identifier of the holder."
					},
					"returns": {
						"_0": "An array of Certificate structs."
					}
				},
				"isIssuer(address)": {
					"details": "Checks if a given address is an authorized issuer.",
					"params": {
						"account": "The address to check."
					},
					"returns": {
						"_0": "true if the address is an issuer, false otherwise."
					}
				},
				"issueCertificate(string,string)": {
					"details": "Allows an authorized issuer to issue a new certificate.",
					"params": {
						"holderId": "The unique identifier for the certificate recipient.",
						"metadataURI": "The URI pointing to the certificate's metadata."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"removeIssuer(address)": {
					"details": "Allows the owner to remove an issuer.",
					"params": {
						"_issuer": "The address of the issuer to remove."
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"revokeCertificate(string,uint256)": {
					"details": "Allows an issuer to revoke a certificate they previously issued.",
					"params": {
						"holderId": "The identifier of the holder whose certificate is being revoked.",
						"index": "The index of the certificate in the holder's array."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"verifyCertificate(string,uint256)": {
					"details": "Verifies a single certificate by its holder ID and index.",
					"params": {
						"holderId": "The identifier of the holder.",
						"index": "The index of the certificate in the holder's array."
					},
					"returns": {
						"_0": "The Certificate struct."
					}
				}
			},
			"title": "CertificatePlatform",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/1_Storage.sol": "CertificatePlatform"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"contracts/1_Storage.sol": {
			"keccak256": "0xc2c8796fff3c882b7e40cf30b07323212e64c882390fd7c402914eaa4f8e9258",
			"license": "MIT",
			"urls": [
				"bzz-raw://f9a6e1e483bf8f39b4ed5d6177ebbf0ef214512739c6ce9c6486077cbbba63dd",
				"dweb:/ipfs/QmRAg9PE6B6S1B3faeo4S5gMgYGGzssCjyFEtaKrZdoHTm"
			]
		}
	},
	"version": 1
}